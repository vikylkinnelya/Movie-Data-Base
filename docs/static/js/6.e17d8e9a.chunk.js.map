{"version":3,"sources":["servises/getDataRequest.js","components/render-movie-card/render-movie-card.jsx","components/render-movie-card/index.js"],"names":["getDataRequest","searchParam","questionParam","setState","currPage","type","year","setError","setTotalResults","setLoading","setDetailRequest","API_KEY","fetch","length","then","resp","json","response","Response","Error","console","log","statusText","Search","totalResults","catch","message","MovieCard","React","lazy","RenderMovieCard","state","useContext","MyContext","favList","watchList","q","setMovie","setActivateModal","setShowDetail","genreList","yearValue","getData","useCallback","useEffect","uniqueID","slice","map","result","includes","imdbID","push","fallback","isFav","localStorage","getItem","isWatch","ClickHandler","item"],"mappings":"8LA6BeA,EA7BQ,SAACC,EAAaC,EAAeC,EAAUC,GAA6F,IAAnFC,EAAkF,uDAA3E,GAAIC,EAAuE,uDAAhE,GAAIC,EAA4D,uCAAlDC,EAAkD,uCAAjCC,EAAiC,uCAArBC,EAAqB,uCAElJC,EAAU,WAEhBC,MAAM,4BAAD,OAA6BX,EAA7B,YAA4CC,EAA5C,iBAAkEE,EAAlE,iBAAmG,IAAhBC,EAAKQ,OAAeR,EAAO,GAAKA,EAAnH,cAA6HC,EAA7H,mBAA4IK,IAC9IG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,GAA0B,UAAtBA,EAASC,SAGX,MAFAX,EAASU,EAASE,OAClBC,QAAQC,IAAIJ,EAASE,OACf,IAAIA,MAAMF,EAASK,YAEL,MAAhBrB,IACFE,EAASc,EAASM,QAClBf,EAAgBS,EAASO,eAEP,MAAhBvB,GAAuBgB,GACzBd,EAASc,GAGbV,EAAS,MACTE,GAAW,GACXC,GAAiB,MAChBe,OAAM,YAAkB,IAAfC,EAAc,EAAdA,QACVjB,GAAW,GACXF,EAASmB,O,QCnBTC,EAAYC,IAAMC,MAAK,kBAAM,uDAoDpBC,EAlDS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEiIC,qBAAWC,KAAzKC,EAF6B,EAE7BA,QAASC,EAFoB,EAEpBA,UAAWC,EAFS,EAETA,EAAGC,EAFM,EAENA,SAAU5B,EAFJ,EAEIA,WAAYF,EAFhB,EAEgBA,SAAUC,EAF1B,EAE0BA,gBAAiB8B,EAF3C,EAE2CA,iBAAkB5B,EAF7D,EAE6DA,iBAAkB6B,EAF/E,EAE+EA,cAAeC,EAF9F,EAE8FA,UAAWC,EAFzG,EAEyGA,UAAWrC,EAFpH,EAEoHA,SAEnJsC,EAAUC,uBAAY,WAC1B3C,EAAe,IAAKoC,EAAGC,EAAUjC,EAAUoC,EAAWC,EAAWlC,EAAUC,EAAiBC,EAAYC,KACvG,CAAC0B,EAAGhC,EAAUoC,EAAWC,IAE5BG,qBAAU,WACRnC,GAAW,GACXF,EAAS,MACT8B,EAAS,MACT7B,EAAgB,MAChBkC,MACC,CAACA,IAEJ,IAMIG,EAAW,GAEf,OACE,mCACa,OAAVd,GAAkBA,EAAMlB,OAAS,GAAKkB,EAAMe,MAAM,EAAG,IAAIC,KAAI,SAACC,GAE7D,IAAKH,EAASI,SAASD,EAAOE,QAG5B,OAFAL,EAASM,KAAKH,EAAOE,QAGnB,cAAC,WAAD,CAAUE,SAAU,cAAC,IAAD,IAApB,SACE,cAACzB,EAAD,aACE0B,MAAOnB,EAAQe,SAASD,IAAWM,aAAaC,QAAQ,OAASP,EAAOE,QACxEM,QAASrB,EAAUc,SAASD,IAAWM,aAAaC,QAAQ,SAAWP,EAAOE,QAE9EO,aAAc,kBArBDC,EAqByBV,EApBlDV,GAAiB,GACjB5B,GAAiB,QACjBV,EAAe,IAAK0D,EAAKR,OAAQX,EAAenC,EAAUoC,EAAWC,EAAWlC,EAAUC,EAAiBC,EAAYC,GAH/F,IAACgD,GAuBbV,OAAQA,GACJA,GAFCA,EAAOE,gBC7CbpB","file":"static/js/6.e17d8e9a.chunk.js","sourcesContent":["const getDataRequest = (searchParam, questionParam, setState, currPage, type = '', year = '', setError, setTotalResults, setLoading, setDetailRequest) => { //гибкий запрос на сервер\r\n\r\n  const API_KEY = 'a6a004a3'\r\n\r\n  fetch(`https://www.omdbapi.com/?${searchParam}=${questionParam}&page=${currPage}&type=${type.length === 2 ? type = '' : type}&y=${year}&apikey=${API_KEY}`)\r\n    .then(resp => resp.json())\r\n    .then(response => {\r\n      if (response.Response === 'False') {\r\n        setError(response.Error)\r\n        console.log(response.Error)\r\n        throw new Error(response.statusText)\r\n      } else {\r\n        if (searchParam === 's') {\r\n          setState(response.Search)\r\n          setTotalResults(response.totalResults)\r\n        }\r\n        if (searchParam === 'i' && response) {\r\n          setState(response)\r\n        }\r\n      }\r\n      setError(null);\r\n      setLoading(false);\r\n      setDetailRequest(false);\r\n    }).catch(( {message} ) => {\r\n      setLoading(false);\r\n      setError(message);\r\n    })\r\n}\r\n\r\nexport default getDataRequest","import './render-movie-card.css'\r\nimport React, { Suspense, useContext, useCallback, useEffect } from 'react';\r\nimport MyContext from '../../servises/Context';\r\nimport getDataRequest from '../../servises/getDataRequest';\r\nimport Loader from '../loader';\r\n\r\nconst MovieCard = React.lazy(() => import('../movie-card/'))\r\n\r\nconst RenderMovieCard = ({ state }) => {\r\n\r\n  const { favList, watchList, q, setMovie, setLoading, setError, setTotalResults, setActivateModal, setDetailRequest, setShowDetail, genreList, yearValue, currPage } = useContext(MyContext)\r\n\r\n  const getData = useCallback(() => {\r\n    getDataRequest('s', q, setMovie, currPage, genreList, yearValue, setError, setTotalResults, setLoading, setDetailRequest);\r\n  }, [q, currPage, genreList, yearValue])\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setMovie(null)\r\n    setTotalResults(null)\r\n    getData()\r\n  }, [getData]);\r\n\r\n  const movieClickHandler = (item) => { //обработчик события клика. при клике на карточку\r\n    setActivateModal(true); //показать модалку. эл импортируется из другого компонента\r\n    setDetailRequest(true); //обновить стейт с состоянием запроса к серверу\r\n    getDataRequest('i', item.imdbID, setShowDetail, currPage, genreList, yearValue, setError, setTotalResults, setLoading, setDetailRequest) //запрос к серверу за деталями фильма\r\n  }\r\n\r\n  let uniqueID = []\r\n\r\n  return (\r\n    <>\r\n      {state !== null && state.length > 0 && state.slice(0, 10).map((result) => {\r\n\r\n        if (!uniqueID.includes(result.imdbID)) {\r\n          uniqueID.push(result.imdbID)\r\n\r\n          return (\r\n            <Suspense fallback={<Loader />}>\r\n              <MovieCard\r\n                isFav={favList.includes(result) || localStorage.getItem('fav_' + result.imdbID)}\r\n                isWatch={watchList.includes(result) || localStorage.getItem('watch_' + result.imdbID)}\r\n\r\n                ClickHandler={() => movieClickHandler(result)}\r\n                key={result.imdbID}\r\n                result={result}\r\n                {...result}\r\n              />\r\n            </Suspense>\r\n          )\r\n        }\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RenderMovieCard;","import RenderMovieCard from './render-movie-card.jsx';\r\nexport default RenderMovieCard;"],"sourceRoot":""}