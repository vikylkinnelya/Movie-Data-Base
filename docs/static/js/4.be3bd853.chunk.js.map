{"version":3,"sources":["servises/toggleItem.js","components/movie-card/movie-card.jsx","components/movie-card/index.js","servises/getDataRequest.js","components/render-movie-card/render-movie-card.jsx","components/render-movie-card/index.js"],"names":["toggleItem","item","state","setState","selector","data","setData","newList","itemStorageName","imdbID","includes","localStorage","setItem","JSON","stringify","filter","elem","removeItem","Meta","Card","MovieCard","result","ClickHandler","Title","Poster","Type","isWatch","isFav","useContext","MyContext","watchList","favList","setWatch","setFav","className","cover","alt","src","onClick","actions","color","shape","icon","EyeFilled","EyeOutlined","HeartFilled","HeartOutlined","title","description","getDataRequest","searchParam","questionParam","currPage","type","year","setError","setTotalResults","setLoading","setDetailRequest","API_KEY","fetch","length","then","resp","json","response","Response","Error","console","log","statusText","Search","totalResults","catch","message","RenderMovieCard","q","setMovie","setActivateModal","setShowDetail","genreList","yearValue","getData","useCallback","useEffect","uniqueID","slice","map","push","getItem"],"mappings":"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","file":"static/js/4.be3bd853.chunk.js","sourcesContent":["const toggleItem = (item, state, setState, selector, data, setData) => {\r\n\r\n  let newList\r\n  let itemStorageName = selector + '_' + item.imdbID\r\n\r\n  if (!state.includes(item)) {\r\n    newList = [...state, item];\r\n    localStorage.setItem(itemStorageName, JSON.stringify(item))\r\n  }\r\n\r\n  if (state.includes(item)) {\r\n    newList = state.filter(elem => elem !== item)\r\n    localStorage.removeItem(itemStorageName)\r\n  }\r\n\r\n  setState(newList)\r\n}\r\n\r\nexport default toggleItem;","import './movie-card.css';\r\nimport { Card, Tag, Button } from 'antd';\r\nimport { HeartOutlined, EyeOutlined, EyeFilled, HeartFilled } from '@ant-design/icons';\r\nimport React, { useContext } from 'react';\r\nimport MyContext from '../../servises/Context'\r\nimport toggleItem from '../../servises/toggleItem';\r\n\r\n\r\nconst { Meta } = Card;\r\n\r\nconst MovieCard = ({ result, ClickHandler, Title, Poster, Type, isWatch, isFav }) => {\r\n\r\n    const { watchList, favList, setWatch, setFav } = useContext(MyContext)\r\n\r\n    return (\r\n        <Card className='card-container'\r\n            cover={<img\r\n                alt={Title}\r\n                src={Poster === 'N/A' ?\r\n                    'https://placehold.it/198x264&text=Image+Not+Found' :\r\n                    Poster}\r\n                onClick={() => ClickHandler()} />}\r\n\r\n            actions={[\r\n                <>\r\n                    {Type === 'movie' ?\r\n                        <Tag className='tag-type' color='magenta'>{Type}</Tag> :\r\n                        <Tag className='tag-type' color='green'>{Type}</Tag>}\r\n                </>,\r\n\r\n                <Button\r\n                    className={isWatch ? 'overlay watch active' : 'overlay watch'} key='watch'\r\n                    shape='circle'\r\n                    icon={isWatch ? <EyeFilled /> : <EyeOutlined />}\r\n                    onClick={() => toggleItem(result, watchList, setWatch, 'watch')} />\r\n                ,\r\n                <Button\r\n                    className={isFav ? 'overlay like active' : 'overlay like'} key='fav'\r\n                    shape='circle'\r\n                    icon={isFav ? <HeartFilled /> : <HeartOutlined />}\r\n                    onClick={() => toggleItem(result, favList, setFav, 'fav')} />\r\n            ]}\r\n        >\r\n            <Meta\r\n                title={Title}\r\n                description={false}\r\n                onClick={() => ClickHandler()} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default MovieCard;\r\n\r\n","import MovieCard from './movie-card.jsx';\r\nexport default MovieCard;","const getDataRequest = (searchParam, questionParam, setState, currPage, type = '', year = '', setError, setTotalResults, setLoading, setDetailRequest) => { //гибкий запрос на сервер\r\n\r\n  const API_KEY = 'a6a004a3'\r\n\r\n  fetch(`https://www.omdbapi.com/?${searchParam}=${questionParam}&page=${currPage}&type=${type.length === 2 ? type = '' : type}&y=${year}&apikey=${API_KEY}`)\r\n    .then(resp => resp.json())\r\n    .then(response => {\r\n      if (response.Response === 'False') {\r\n        setError(response.Error)\r\n        console.log(response.Error)\r\n        throw new Error(response.statusText)\r\n      } else {\r\n        if (searchParam === 's') {\r\n          setState(response.Search)\r\n          setTotalResults(response.totalResults)\r\n        }\r\n        if (searchParam === 'i' && response) {\r\n          setState(response)\r\n        }\r\n      }\r\n      setError(null);\r\n      setLoading(false);\r\n      setDetailRequest(false);\r\n    }).catch(( {message} ) => {\r\n      setLoading(false);\r\n      setError(message);\r\n    })\r\n}\r\n\r\nexport default getDataRequest","import './render-movie-card.css'\r\nimport React, { useContext, useCallback, useEffect } from 'react';\r\nimport MyContext from '../../servises/Context';\r\nimport MovieCard from '../movie-card/'\r\nimport getDataRequest from '../../servises/getDataRequest'; \r\n\r\nconst RenderMovieCard = ({ state }) => {\r\n\r\n  const { favList, watchList, q, setMovie, setLoading, setError, setTotalResults, setActivateModal, setDetailRequest, setShowDetail, genreList, yearValue, currPage } = useContext(MyContext)\r\n\r\n  const getData = useCallback(() => {\r\n    getDataRequest('s', q, setMovie, currPage, genreList, yearValue, setError, setTotalResults, setLoading, setDetailRequest);\r\n  }, [q, currPage, genreList, yearValue])\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setMovie(null)\r\n    setTotalResults(null)\r\n    getData()\r\n  }, [getData]);\r\n  \r\n  //в кач-ве второго параметра может быть только примитивный обьект\r\n  //при его изменении будет происходить ререндеринг\r\n\r\n  const movieClickHandler = (item) => { //обработчик события клика. при клике на карточку\r\n    setActivateModal(true); //показать модалку. эл импортируется из другого компонента\r\n    setDetailRequest(true); //обновить стейт с состоянием запроса к серверу\r\n    getDataRequest('i', item.imdbID, setShowDetail, currPage, genreList, yearValue, setError, setTotalResults, setLoading, setDetailRequest) //запрос к серверу за деталями фильма\r\n  }\r\n\r\n  /* const getIdRequest = (questionParam) => { //гибкий запрос на сервер\r\n\r\n    const API_KEY = 'a6a004a3'\r\n\r\n    fetch(`https://www.omdbapi.com/?i=${questionParam}&apikey=${API_KEY}`)\r\n      .then(resp => resp.json())\r\n      .then(response => {\r\n        if (response.Response === 'False') { //если нет ответа\r\n          setError(response.Error) //записать в обьект ошибки ошибку\r\n          throw new Error(response.statusText)\r\n        } else {\r\n          //setTermState(response)\r\n        }\r\n        setLoading(false)\r\n        setDetailRequest(false);\r\n      }).catch(({ message }) => {\r\n        setLoading(false);\r\n        setError(message);\r\n      })\r\n  } */\r\n\r\n  let uniqueID = []\r\n\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n      {state !== null && state.length > 0 && state.slice(0, 10).map((result) => {\r\n\r\n        if (!uniqueID.includes(result.imdbID)) {\r\n          uniqueID.push(result.imdbID)\r\n\r\n          return (\r\n\r\n            <MovieCard\r\n              isFav={favList.includes(result) || localStorage.getItem('fav_' + result.imdbID) }\r\n              isWatch={watchList.includes(result) || localStorage.getItem('watch_' + result.imdbID)}\r\n\r\n              ClickHandler={() => movieClickHandler(result)}\r\n              key={result.imdbID}\r\n              result={result}\r\n              {...result}\r\n            />\r\n          )\r\n        }\r\n      })}\r\n\r\n\r\n      \r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RenderMovieCard;","import RenderMovieCard from './render-movie-card.jsx';\r\nexport default RenderMovieCard;"],"sourceRoot":""}